#!/usr/bin/env ruby
require 'bundle-try'

if ARGV.empty? || %w(-h --help help try).include?(ARGV.first)
puts(<<-EOH)
OPTIONS
    --shell
      Opens a shell instead of a Ruby REPL. This will let you try executables etc.

EXAMPLES

Pick a gem, any gem:

$ bundle try redis
... some bundling ...
irb(main):001:0> Redis
=> Redis

Multiple gems:

$ bundle try redis rake

Specific version:

$ bundle try redis '3.1.0'

...or any requirement that would be understood by bundler:

$ bundle try redis '~> 3.1.0'

Combined with gems that don't need a specific version:

$ bundle try redis '~> 3.1.0' rake gem_with_version '1.0'

Github repository:

$ bundle try https://github.com/jeremyevans/sequel # or the clone-url with .git

...or via the short notation:

$ bundle try gh:jeremyevans/sequel

Specific Github version:

$ bundle try gh:jeremyevans/sequel 4.21.0

Prepend the gem-name when it can't be derived from the url:

$ bundle try redis@gh:redis/redis-rb

Gem in a gist (see [the gist](https://gist.github.com/eval/66f7bfaf17d364ddd232) as an example of a minimum viable gem):

$ bundle try rot13@https://gist.github.com/eval/66f7bfaf17d364ddd232

No Gemfile will be saved, so it's save to run from an existing project-folder.
But if you need it:

$ bundle try rake > Gemfile

No, the following won't work :(

# No Gemception
$ bundle try bundle-try

EOH
  exit
else
  require 'tmpdir'
  require 'fileutils'
  require 'bundler/cli'

  bundle_try_folder = File.join(Dir.tmpdir, 'bundle-try')
  gemfile_path = File.join(bundle_try_folder, 'Gemfile')
  FileUtils.rm_r(bundle_try_folder, secure: true) if Dir.exist?(bundle_try_folder)
  FileUtils.mkdir(bundle_try_folder)

  argv = ARGV.dup.tap {|a| a.delete('--shell') }
  gemfile_content = BundleTry::Gemfile.render({:gemlines => BundleTry.argv_to_gemlines(argv) })
  File.write(gemfile_path, gemfile_content)
  Dir.chdir bundle_try_folder

  bundle_install = ->(quiet = false) {
    cmd = %w(install)
    cmd << '--quiet' if quiet
    Bundler::CLI.start(cmd, :debug => false)
  }

  if ARGV.include?('--shell')
    bundle_install[]
    puts "Entering folder '#{bundle_try_folder}'. Happy hacking!"
    `#{ENV['SHELL']} 1>&2`
  else
    if STDOUT.tty?
      bundle_install[]
      puts "Want to capture the generated Gemfile? Use `bundle try rake > Gemfile`."
      Bundler::CLI.start(%W(console), :debug => true)
    else
      bundle_install[:quiet]
      puts gemfile_content
    end
  end
end
